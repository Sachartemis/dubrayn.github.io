################################################################################
################################################################################
#################################### IPS-DEV ###################################
################################################################################
################################################################################

Project:
* calculate and manipulate 1D-HO solutions (C++ / armadillo)
* use git, doxygen, make, cxxtest, remark.js

---- WEEK0 ----

* introduction
* project
* git

=== TP0

---- WEEK1 ----

* make
* Armadillo
* Doxygen

=== TP1

---- WEEK2 ----

* CxxTest
* C++ headers
* astyle

=== TP2

---- WEEK3 ----

* latex
* markdown
* quadratures

=== TP3

---- WEEK4 ----

* Python (start)

=== TP4

---- WEEK5 ----

=== project presentations

################################################################################
################################################################################
################################### IPS-PROD ###################################
################################################################################
################################################################################

Project:
* calculate and plot the local density of a nuclear system (C++ / armadillo)
* use git, doxygen, make, cxxtest, matplotlib, remark.js, povray

---- WEEK0 ----

* introduction
* project
* Python (end)

=== TP0

---- WEEK1 ----

* sum optimization
* POVray

=== TP1

---- WEEK2 ----

* git advanced uses
* blender

=== TP2

---- WEEK3 ----

* valgrind
* gdb

=== TP3

---- WEEK4 ----

* python numpy

=== TP4

---- WEEK5 ----

Project presentation

################################################################################
################################################################################
###################################### PSA #####################################
################################################################################
################################################################################

Project:
* write a 2D-FD solver for the time-dependent Shrodinger equation (Python / C++ / armadillo)
* visualize the time-evolution of a wave packet (paraview / custom VTK)
* get some real-time monitoring information of a run (API)
* implement an automatic restart mechanism
* store the results in a mongoDB database
* check some special cases (diffraction, tunneling effect, HO solutions, etc...)
* use git, doxygen, make, cxxtest, swig, remark.js, VTK

---- Session 0 ----

* introduction
* project

---- Session 1 ----

* python bindings - manual

---- Session 2 ----

* python bindings - swig

---- Session 3 ----

 * errors / exceptions

---- Session 4 ----

* multiprocessing

---- Session 5 ----

===> Mid-project presentation

---- Session 6 ----

* VTK

---- Session 7 ----

* paraview
 * cow.vtp
  * generate normals
  * plot with normal.y
  * plot normal glyphs
  * see all normals
  * add axes
  * change color map
  * edit color map
 * wind.vtk
  * volume visualization
  * isosurfaces
  * streamlines
 * foot.vtk
  * volume
  * isosurfaces
  * clip
 * brain.vtk
  * volume
  * change color
  * slice
 * pyevtk_anim_images.py / pyevtk_anim_grids.py
  * warp by scalar
  * plotSelectionOverTime
  * save animation
  * view animation

---- Session 8 ----

* mongoDB

---- Session 9 ----

* live monitoring

---- Session 10 ----

* mpi4py

---- Session 11 ----

===> Final project presentation

# IPS project goals:

* initialize project (hierarchy of files, of classes, doxygen, Makefile, clean, git, cxxtest, data, bindings, README, LICENSE)
* derivate cylindrical HO solutions (LaTeX in doxygen), implement them, check H|p>=E|p>
* write C++ msgpack importer
* calculate the local density from a msgpack
* monitor the code performances with at least a simple timer
* num. calculate some <Q0m> values
* ana. calculate some <Q0m> values
* visualize local density in paraview, blender, povray, etc...
* use bindings in a MPI4py python script to calculate from mongoDB to ana. and num. <Q0m> values
* implement a transparent restart mechanism in the python script
* make a scalability benchmark, identify IO and CPU times
* write monitor server
* write monitor client

# PSA project goals:

* initialize project (hierarchy of files, of classes, doxygen, Makefile, clean, git, cxxtest, data, bindings, README, LICENSE)
* derivate cylindrical HO solutions (LaTeX in doxygen), implement them, check H|p>=E|p>
* write C++ msgpack importer
* calculate the local density from a msgpack
* monitor the code performances with at least a simple timer
* calculate the local density from a msgpack
* num. calculate some <Q0m> values
* ana. calculate some <Q0m> values
* visualize local density in paraview, blender, povray, etc...
* use bindings in a MPI4py python script to calculate from mongoDB to ana. and num. <Q0m> values
* implement a transparent restart mechanism in the python script
* make a scalability benchmark, identify IO and CPU times

BUG: trailing empty code lines are removed by markdown parser in remark.js
BUG: plotly.js does not like CSS scale transform (mouse coords are messed up)
